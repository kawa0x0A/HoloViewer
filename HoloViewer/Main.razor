@inject ApplicationScreenMode ApplicationScreenMode

@using ScreenMode = ApplicationScreenMode.ScreenMode;

<ContentView>
    <StackLayout>
        <StackLayout Orientation="StackOrientation.Horizontal">
            <StackLayout Orientation="StackOrientation.Horizontal">
                <Label Text="画面分割" VerticalOptions="LayoutOptions.CenterAndExpand" FontSize="24" />
                @switch (Device.RuntimePlatform)
                {
                    case Device.WPF:
                        @foreach (var screenModeButtonInfo in screenModeButtonInfos)
                        {
                            <ImageButton Source="@(ImageSource.FromResource(screenModeButtonInfo.iconResourceName))" WidthRequest="@ScreenModeButtonInfo.IconWidthPixel" HeightRequest="@ScreenModeButtonInfo.IconHeightPixel" OnClick="@(() => ChangeScreenMode(screenModeButtonInfo.changeScreenMode))" />
                        }
                        break;

                    case Device.macOS:
                        @foreach (var screenModeButtonInfo in screenModeButtonInfos)
                        {
                            <Grid>
                                <Image Source="@(ImageSource.FromResource(screenModeButtonInfo.iconResourceName))" WidthRequest="@ScreenModeButtonInfo.IconWidthPixel" HeightRequest="@ScreenModeButtonInfo.IconHeightPixel" />
                                <TapGestureRecognizer OnTapped="@(() => ChangeScreenMode(screenModeButtonInfo.changeScreenMode))" />
                            </Grid>
                        }
                        break;
                }
            </StackLayout>
            @switch (Device.RuntimePlatform)
            {
                case Device.WPF:
                    <StackLayout Orientation="StackOrientation.Horizontal">
                        <Label Text="フルスクリーン" VerticalOptions="LayoutOptions.CenterAndExpand" FontSize="24" />
                        <Switch IsToggledChanged="ChangeWindowMode" VerticalOptions="LayoutOptions.CenterAndExpand" />
                    </StackLayout>
                    break;
            }

            <StackLayout Orientation="StackOrientation.Horizontal" HorizontalOptions="LayoutOptions.EndAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                <Button Text="フィードバック" FontSize="24" VerticalOptions="LayoutOptions.Center" OnClick="ShowFeedBackDialog" />
                <Button Text="寄付" FontSize="24" VerticalOptions="LayoutOptions.Center" OnClick="OpenBillingPage" />
            </StackLayout>
        </StackLayout>

        @switch (ApplicationScreenMode.CurrentScreenMode)
        {
            case ScreenMode.Single:
                <Grid HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    <StackLayout>
                        <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                            <HoloViewer.WebUI.App />
                        </BlazorWebView>
                    </StackLayout>
                </Grid>
                break;

            case ScreenMode.SplitHorizontal2:
                <Grid RowDefinitions="*, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 2; i++)
                    {
                        <GridCell Row="@i">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;

            case ScreenMode.SplitVertical2:
                <Grid ColumnDefinitions="*, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 2; i++)
                    {
                        <GridCell Column="@i">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;

            case ScreenMode.SplitHorizontal3:
                <Grid RowDefinitions="*, *, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 3; i++)
                    {
                        <GridCell Row="@i">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;

            case ScreenMode.SplitVertical3:
                <Grid ColumnDefinitions="*, *, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 3; i++)
                    {
                        <GridCell Column="@i">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;

            case ScreenMode.SplitCustom3_1:
                <Grid RowDefinitions="*, *" ColumnDefinitions="*, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 3; i++)
                    {
                        <GridCell Row="@GridRowSplitCustom3_1[i]" Column="@GridColumnSplitCustom3_1[i]" ColumnSpan="@GridColumnSpanSplitCustom3_1[i]">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;

            case ScreenMode.SplitCustom3_2:
                <Grid RowDefinitions="*, *" ColumnDefinitions="*, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 3; i++)
                    {
                        <GridCell Row="@GridRowSplitCustom3_2[i]" Column="@GridColumnSplitCustom3_2[i]" ColumnSpan="@GridColumnSpanSplitCustom3_2[i]">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>

                    }
                </Grid>
                break;

            case ScreenMode.SplitHorizontal4:
                <Grid RowDefinitions="*, *, *, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 4; i++)
                    {
                        <GridCell Row="@i">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;

            case ScreenMode.SplitVertical4:
                <Grid ColumnDefinitions="*, *, *, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 4; i++)
                    {
                        <GridCell Column="@i">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;

            case ScreenMode.SplitCustom4:
                <Grid RowDefinitions="*, *" ColumnDefinitions="*, *" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalOptions="LayoutOptions.FillAndExpand">
                    @for (int i = 0; i < 4; i++)
                    {
                        <GridCell Row="@GridRowSplitCustom4[i]" Column="@GridColumnSplitCustom4[i]">
                            <StackLayout>
                                <BlazorWebView @ref="BlazorWebViews" VerticalOptions="LayoutOptions.FillAndExpand">
                                    <HoloViewer.WebUI.App />
                                </BlazorWebView>
                            </StackLayout>
                        </GridCell>
                    }
                </Grid>
                break;
        }

    </StackLayout>
</ContentView>


@code
{
    public class ScreenModeButtonInfo
    {
        public delegate void OnClickFunction ();

        public readonly string iconResourceName;
        public readonly ScreenMode changeScreenMode;
        public const int IconWidthPixel = 32;
        public const int IconHeightPixel = 32;

        public ScreenModeButtonInfo (string iconResourceName, ScreenMode changeScreenMode)
        {
            this.iconResourceName = iconResourceName;
            this.changeScreenMode = changeScreenMode;
        }
    }

    public static readonly ScreenModeButtonInfo[] screenModeButtonInfos =
    {
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenSingle.png", ScreenMode.Single),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenHorizontal2.png", ScreenMode.SplitHorizontal2),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenVertical2.png", ScreenMode.SplitVertical2),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenHorizontal3.png", ScreenMode.SplitHorizontal3),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenVertical3.png", ScreenMode.SplitVertical3),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenCustom3-1.png", ScreenMode.SplitCustom3_1),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenCustom3-2.png", ScreenMode.SplitCustom3_2),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenHorizontal4.png", ScreenMode.SplitHorizontal4),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenVertical4.png", ScreenMode.SplitVertical4),
        new ScreenModeButtonInfo("HoloViewer.Resources.Icon.IconScreenCustom4.png", ScreenMode.SplitCustom4),
    };

    public static readonly int[] GridRowSplitCustom3_1 = { 0, 1, 1 };
    public static readonly int[] GridColumnSplitCustom3_1 = { 0, 0, 1 };
    public static readonly int[] GridColumnSpanSplitCustom3_1 = { 2, 1, 1 };
    public static readonly int[] GridRowSplitCustom3_2 = { 0, 0, 1 };
    public static readonly int[] GridColumnSplitCustom3_2 = { 0, 1, 0 };
    public static readonly int[] GridColumnSpanSplitCustom3_2 = { 1, 1, 2 };
    public static readonly int[] GridRowSplitCustom4 = { 0, 0, 1, 1 };
    public static readonly int[] GridColumnSplitCustom4 = { 0, 1, 0, 1 };


    private List<BlazorWebView> blazorWebViews = new List<BlazorWebView>();
    private List<WebViewToolbar> webViewToolbars = new List<WebViewToolbar>();

    public BlazorWebView BlazorWebViews { set { blazorWebViews.Add(value); } }
    public WebViewToolbar WebViewToolbars { set { webViewToolbars.Add(value); } }

    protected override void OnAfterRender (bool firstRender)
    {
        if (blazorWebViews.Count != webViewToolbars.Count)
        {
            return;
        }

        for (int i = 0; i < blazorWebViews.Count; i++)
        {
            webViewToolbars[i].BindingBlazorWebView = blazorWebViews[i];
        }

        blazorWebViews.Clear();
        webViewToolbars.Clear();

        base.OnAfterRender(firstRender);
    }

    void ChangeScreenMode (ScreenMode screenMode)
    {
        ApplicationScreenMode.ChangeScreenMode(screenMode);
    }

    void ChangeWindowMode (bool isToggle)
    {
        var windowMode = DependencyService.Get<IWindowMode>();

        if (isToggle)
        {
            windowMode.FullScreen();
        }
        else
        {
            windowMode.WindowMode();
        }
    }

    void ShowFeedBackDialog ()
    {
        var feedBackDialog = DependencyService.Get<IFeedBackDialog>();

        feedBackDialog.ShowDialog();
    }

    void OpenBillingPage ()
    {
        var billingPage = DependencyService.Get<IBillingPage>();

        billingPage.OpenPage();
    }
}
